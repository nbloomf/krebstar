{-# OPTIONS_GHC -fno-warn-unused-binds -fno-warn-missing-signatures #-}
{-# LANGUAGE CPP #-}
{-# LINE 1 "Lexer.x" #-}

module Kreb.Lang.Lexer where

import qualified Data.Text.Lazy as T
import qualified Data.List as L

import qualified Kreb.Lang.LexicalGrammar as Lex
import Kreb.Lang.Loc
import Kreb.Format

#if __GLASGOW_HASKELL__ >= 603
#include "ghcconfig.h"
#elif defined(__GLASGOW_HASKELL__)
#include "config.h"
#endif
#if __GLASGOW_HASKELL__ >= 503
import Data.Array
import Data.Array.Base (unsafeAt)
#else
import Array
#endif
{-# LINE 1 "templates/wrappers.hs" #-}
-- -----------------------------------------------------------------------------
-- Alex wrapper code.
--
-- This code is in the PUBLIC DOMAIN; you may copy it freely and use
-- it for any purpose whatsoever.


import Control.Applicative as App (Applicative (..))
import qualified Control.Monad (ap)


import Data.Word (Word8)
















import Data.Char (ord)
import qualified Data.Bits

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
 where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]



type Byte = Word8

-- -----------------------------------------------------------------------------
-- The input type


type AlexInput = (AlexPosn,     -- current position,
                  Char,         -- previous char
                  [Byte],       -- pending bytes on current char
                  String)       -- current input string

ignorePendingBytes :: AlexInput -> AlexInput
ignorePendingBytes (p,c,_ps,s) = (p,c,[],s)

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (_p,c,_bs,_s) = c

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p,c,(b:bs),s) = Just (b,(p,c,bs,s))
alexGetByte (_,_,[],[]) = Nothing
alexGetByte (p,_,[],(c:s))  = let p' = alexMove p c
                                  (b:bs) = utf8Encode c
                              in p' `seq`  Just (b, (p', c, bs, s))





























































-- -----------------------------------------------------------------------------
-- Token positions

-- `Posn' records the location of a token in the input text.  It has three
-- fields: the address (number of chacaters preceding the token), line number
-- and column of a token within the file. `start_pos' gives the position of the
-- start of the file and `eof_pos' a standard encoding for the end of file.
-- `move_pos' calculates the new position after traversing a given character,
-- assuming the usual eight character tab stops.


data AlexPosn = AlexPn !Int !Int !Int
        deriving (Eq,Show)

alexStartPos :: AlexPosn
alexStartPos = AlexPn 0 1 1

alexMove :: AlexPosn -> Char -> AlexPosn
alexMove (AlexPn a l c) '\t' = AlexPn (a+1)  l     (((c+alex_tab_size-1) `div` alex_tab_size)*alex_tab_size+1)
alexMove (AlexPn a l _) '\n' = AlexPn (a+1) (l+1)   1
alexMove (AlexPn a l c) _    = AlexPn (a+1)  l     (c+1)


-- -----------------------------------------------------------------------------
-- Default monad


data AlexState = AlexState {
        alex_pos :: !AlexPosn,  -- position at current input location
        alex_inp :: String,     -- the current input
        alex_chr :: !Char,      -- the character before the input
        alex_bytes :: [Byte],
        alex_scd :: !Int        -- the current startcode

      , alex_ust :: AlexUserState -- AlexUserState will be defined in the user program

    }

-- Compile with -funbox-strict-fields for best results!

runAlex :: String -> Alex a -> Either String a
runAlex input__ (Alex f)
   = case f (AlexState {alex_pos = alexStartPos,
                        alex_inp = input__,
                        alex_chr = '\n',
                        alex_bytes = [],

                        alex_ust = alexInitUserState,

                        alex_scd = 0}) of Left msg -> Left msg
                                          Right ( _, a ) -> Right a

newtype Alex a = Alex { unAlex :: AlexState -> Either String (AlexState, a) }

instance Functor Alex where
  fmap f a = Alex $ \s -> case unAlex a s of
                            Left msg -> Left msg
                            Right (s', a') -> Right (s', f a')

instance Applicative Alex where
  pure a   = Alex $ \s -> Right (s, a)
  fa <*> a = Alex $ \s -> case unAlex fa s of
                            Left msg -> Left msg
                            Right (s', f) -> case unAlex a s' of
                                               Left msg -> Left msg
                                               Right (s'', b) -> Right (s'', f b)

instance Monad Alex where
  m >>= k  = Alex $ \s -> case unAlex m s of
                                Left msg -> Left msg
                                Right (s',a) -> unAlex (k a) s'
  return = App.pure

alexGetInput :: Alex AlexInput
alexGetInput
 = Alex $ \s@AlexState{alex_pos=pos,alex_chr=c,alex_bytes=bs,alex_inp=inp__} ->
        Right (s, (pos,c,bs,inp__))

alexSetInput :: AlexInput -> Alex ()
alexSetInput (pos,c,bs,inp__)
 = Alex $ \s -> case s{alex_pos=pos,alex_chr=c,alex_bytes=bs,alex_inp=inp__} of
                  state__@(AlexState{}) -> Right (state__, ())

alexError :: String -> Alex a
alexError message = Alex $ const $ Left message

alexGetStartCode :: Alex Int
alexGetStartCode = Alex $ \s@AlexState{alex_scd=sc} -> Right (s, sc)

alexSetStartCode :: Int -> Alex ()
alexSetStartCode sc = Alex $ \s -> Right (s{alex_scd=sc}, ())


alexGetUserState :: Alex AlexUserState
alexGetUserState = Alex $ \s@AlexState{alex_ust=ust} -> Right (s,ust)

alexSetUserState :: AlexUserState -> Alex ()
alexSetUserState ss = Alex $ \s -> Right (s{alex_ust=ss}, ())


alexMonadScan = do
  inp__ <- alexGetInput
  sc <- alexGetStartCode
  case alexScan inp__ sc of
    AlexEOF -> alexEOF
    AlexError ((AlexPn _ line column),_,_,_) -> alexError $ "lexical error at line " ++ (show line) ++ ", column " ++ (show column)
    AlexSkip  inp__' _len -> do
        alexSetInput inp__'
        alexMonadScan
    AlexToken inp__' len action -> do
        alexSetInput inp__'
        action (ignorePendingBytes inp__) len

-- -----------------------------------------------------------------------------
-- Useful token actions

type AlexAction result = AlexInput -> Int -> Alex result

-- just ignore this token and scan another one
-- skip :: AlexAction result
skip _input _len = alexMonadScan

-- ignore this token, but set the start code to a new value
-- begin :: Int -> AlexAction result
begin code _input _len = do alexSetStartCode code; alexMonadScan

-- perform an action for this token, and set the start code to a new value
andBegin :: AlexAction result -> Int -> AlexAction result
(action `andBegin` code) input__ len = do
  alexSetStartCode code
  action input__ len

token :: (AlexInput -> Int -> token) -> AlexAction token
token t input__ len = return (t input__ len)



-- -----------------------------------------------------------------------------
-- Monad (with ByteString input)







































































































-- -----------------------------------------------------------------------------
-- Basic wrapper

























-- -----------------------------------------------------------------------------
-- Basic wrapper, ByteString version
































-- -----------------------------------------------------------------------------
-- Posn wrapper

-- Adds text positions to the basic model.













-- -----------------------------------------------------------------------------
-- Posn wrapper, ByteString version














-- -----------------------------------------------------------------------------
-- GScan wrapper

-- For compatibility with previous versions of Alex, and because we can.














alex_tab_size :: Int
alex_tab_size = 8
alex_base :: Array Int Int
alex_base = listArray (0 :: Int, 109)
  [ -8
  , 106
  , 353
  , 469
  , 583
  , 697
  , 102
  , -58
  , 692
  , -97
  , -91
  , 820
  , -62
  , -93
  , -92
  , -95
  , -86
  , -88
  , -89
  , -102
  , -94
  , 0
  , 933
  , -90
  , -87
  , -85
  , 0
  , 998
  , -82
  , -43
  , 18
  , -79
  , -40
  , -77
  , -29
  , 20
  , 1254
  , 1190
  , 0
  , 1407
  , 1491
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 23
  , 0
  , 640
  , 0
  , 1575
  , 0
  , 1633
  , 1676
  , 1760
  , 1844
  , 1928
  , 0
  , 2003
  , 2078
  , 2153
  , 2228
  , 2303
  , 2378
  , 2453
  , 2537
  , 2621
  , 2705
  , 2789
  , 2873
  , 2957
  , 3041
  , 3125
  , 3209
  , 3293
  , 3377
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 3452
  , 3536
  , 3620
  , 3704
  , 3788
  , 3872
  , 3956
  , 4040
  , 4124
  , 4208
  , 4292
  , 4376
  , 4460
  , 4544
  , 4628
  , 0
  , 0
  , 0
  , 0
  , 121
  ]

alex_table :: Array Int Int
alex_table = listArray (0 :: Int, 4883)
  [ 0
  , 109
  , 109
  , 84
  , 35
  , 109
  , 30
  , 25
  , 24
  , 23
  , 20
  , 19
  , 16
  , 15
  , 10
  , 18
  , 9
  , 33
  , 108
  , 105
  , 28
  , 85
  , 81
  , 31
  , 109
  , 61
  , 44
  , 6
  , 86
  , 55
  , 53
  , 43
  , 109
  , 109
  , 0
  , 0
  , 109
  , 0
  , 0
  , 0
  , 42
  , 41
  , 41
  , 41
  , 41
  , 41
  , 41
  , 41
  , 41
  , 41
  , 86
  , 0
  , 53
  , 0
  , 0
  , 109
  , 17
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 45
  , 0
  , 46
  , 0
  , 39
  , 0
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 50
  , 109
  , 0
  , 0
  , 50
  , 41
  , 41
  , 41
  , 41
  , 41
  , 41
  , 41
  , 41
  , 41
  , 41
  , 109
  , 109
  , 0
  , 0
  , 109
  , 0
  , 0
  , 0
  , 50
  , 0
  , 48
  , 0
  , 0
  , 0
  , 0
  , 47
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 109
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 0
  , 0
  , 0
  , 0
  , 40
  , 52
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 36
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 37
  , 8
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 27
  , 11
  , 21
  , 21
  , 21
  , 22
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 109
  , 109
  , 0
  , 0
  , 109
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 109
  , 0
  , 0
  , 0
  , 89
  , 0
  , 0
  , 0
  , 106
  , 107
  , 0
  , 0
  , 0
  , 29
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 0
  , 0
  , 14
  , 97
  , 97
  , 100
  , 97
  , 97
  , 97
  , 97
  , 97
  , 102
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 98
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 0
  , 88
  , 109
  , 109
  , 0
  , 0
  , 109
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 109
  , 0
  , 44
  , 6
  , 0
  , 0
  , 0
  , 43
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 42
  , 41
  , 41
  , 41
  , 41
  , 41
  , 41
  , 41
  , 41
  , 41
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 13
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 45
  , 0
  , 46
  , 0
  , 39
  , 0
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 109
  , 109
  , 0
  , 0
  , 109
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 109
  , 0
  , 0
  , 0
  , 56
  , 0
  , 0
  , 0
  , 82
  , 83
  , 0
  , 0
  , 0
  , 32
  , 80
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 34
  , 0
  , 0
  , 7
  , 0
  , 0
  , 12
  , 72
  , 72
  , 75
  , 72
  , 72
  , 72
  , 72
  , 72
  , 77
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 73
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 49
  , 0
  , 0
  , 0
  , 0
  , 49
  , 64
  , 64
  , 64
  , 64
  , 64
  , 63
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 109
  , 109
  , 0
  , 0
  , 109
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 109
  , 0
  , 0
  , 49
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 49
  , 0
  , 0
  , 0
  , 0
  , 0
  , 49
  , 0
  , 49
  , 0
  , 0
  , 0
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 0
  , 0
  , 0
  , 0
  , 54
  , 0
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 36
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 38
  , 8
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 26
  , 27
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 37
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 39
  , 0
  , 0
  , 0
  , 0
  , 0
  , 39
  , 0
  , 0
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 0
  , 0
  , 0
  , 0
  , 39
  , 0
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 39
  , 40
  , 0
  , 0
  , 0
  , 0
  , 0
  , 40
  , 0
  , 0
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 0
  , 0
  , 0
  , 0
  , 40
  , 0
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 40
  , 54
  , 0
  , 0
  , 0
  , 0
  , 0
  , 54
  , 0
  , 0
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 0
  , 0
  , 0
  , 0
  , 54
  , 0
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 54
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 66
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 65
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 62
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 67
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 57
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 64
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 68
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 60
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 78
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 76
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 74
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 71
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 70
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 69
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 79
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 59
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 58
  , 72
  , 72
  , 72
  , 72
  , 72
  , 72
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 90
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 93
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 103
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 101
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 99
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 96
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 95
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 94
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 104
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 92
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 91
  , 97
  , 97
  , 97
  , 97
  , 97
  , 97
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  ]

alex_check :: Array Int Int
alex_check = listArray (0 :: Int, 4883)
  [ -1
  , 9
  , 10
  , 61
  , 101
  , 13
  , 97
  , 69
  , 101
  , 101
  , 105
  , 97
  , 100
  , 102
  , 116
  , 101
  , 110
  , 102
  , 100
  , 62
  , 110
  , 100
  , 62
  , 110
  , 32
  , 102
  , 34
  , 35
  , 10
  , 58
  , 10
  , 39
  , 9
  , 10
  , -1
  , -1
  , 13
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , 32
  , -1
  , 32
  , -1
  , -1
  , 32
  , 64
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , 91
  , -1
  , 93
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 9
  , 10
  , -1
  , -1
  , 13
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , 9
  , 10
  , -1
  , -1
  , 13
  , -1
  , -1
  , -1
  , 32
  , -1
  , 34
  , -1
  , -1
  , -1
  , -1
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 32
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , 92
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 128
  , 129
  , 130
  , 131
  , 132
  , 133
  , 134
  , 135
  , 136
  , 137
  , 138
  , 139
  , 140
  , 141
  , 142
  , 143
  , 144
  , 145
  , 146
  , 147
  , 148
  , 149
  , 150
  , 151
  , 152
  , 153
  , 154
  , 155
  , 156
  , 157
  , 158
  , 159
  , 160
  , 161
  , 162
  , 163
  , 164
  , 165
  , 166
  , 167
  , 168
  , 169
  , 170
  , 171
  , 172
  , 173
  , 174
  , 175
  , 176
  , 177
  , 178
  , 179
  , 180
  , 181
  , 182
  , 183
  , 184
  , 185
  , 186
  , 187
  , 188
  , 189
  , 190
  , 191
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 9
  , 10
  , -1
  , -1
  , 13
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 32
  , -1
  , -1
  , -1
  , 36
  , -1
  , -1
  , -1
  , 40
  , 41
  , -1
  , -1
  , -1
  , 45
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 61
  , -1
  , -1
  , 64
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , -1
  , 124
  , 9
  , 10
  , -1
  , -1
  , 13
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 32
  , -1
  , 34
  , 35
  , -1
  , -1
  , -1
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 64
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , 91
  , -1
  , 93
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 9
  , 10
  , -1
  , -1
  , 13
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 32
  , -1
  , -1
  , -1
  , 36
  , -1
  , -1
  , -1
  , 40
  , 41
  , -1
  , -1
  , -1
  , 45
  , 46
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 58
  , -1
  , -1
  , 61
  , -1
  , -1
  , 64
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , 34
  , -1
  , -1
  , -1
  , -1
  , 39
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 9
  , 10
  , -1
  , -1
  , 13
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 32
  , -1
  , -1
  , 92
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 110
  , -1
  , -1
  , -1
  , -1
  , -1
  , 116
  , -1
  , 118
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 128
  , 129
  , 130
  , 131
  , 132
  , 133
  , 134
  , 135
  , 136
  , 137
  , 138
  , 139
  , 140
  , 141
  , 142
  , 143
  , 144
  , 145
  , 146
  , 147
  , 148
  , 149
  , 150
  , 151
  , 152
  , 153
  , 154
  , 155
  , 156
  , 157
  , 158
  , 159
  , 160
  , 161
  , 162
  , 163
  , 164
  , 165
  , 166
  , 167
  , 168
  , 169
  , 170
  , 171
  , 172
  , 173
  , 174
  , 175
  , 176
  , 177
  , 178
  , 179
  , 180
  , 181
  , 182
  , 183
  , 184
  , 185
  , 186
  , 187
  , 188
  , 189
  , 190
  , 191
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 128
  , 129
  , 130
  , 131
  , 132
  , 133
  , 134
  , 135
  , 136
  , 137
  , 138
  , 139
  , 140
  , 141
  , 142
  , 143
  , 144
  , 145
  , 146
  , 147
  , 148
  , 149
  , 150
  , 151
  , 152
  , 153
  , 154
  , 155
  , 156
  , 157
  , 158
  , 159
  , 160
  , 161
  , 162
  , 163
  , 164
  , 165
  , 166
  , 167
  , 168
  , 169
  , 170
  , 171
  , 172
  , 173
  , 174
  , 175
  , 176
  , 177
  , 178
  , 179
  , 180
  , 181
  , 182
  , 183
  , 184
  , 185
  , 186
  , 187
  , 188
  , 189
  , 190
  , 191
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 143
  , 144
  , 145
  , 146
  , 147
  , 148
  , 149
  , 150
  , 151
  , 152
  , 153
  , 154
  , 155
  , 156
  , 157
  , 158
  , 159
  , 160
  , 161
  , 162
  , 163
  , 164
  , 165
  , 166
  , 167
  , 168
  , 169
  , 170
  , 171
  , 172
  , 173
  , 174
  , 175
  , 176
  , 177
  , 178
  , 179
  , 180
  , 181
  , 182
  , 183
  , 184
  , 185
  , 186
  , 187
  , 188
  , 189
  , 190
  , 191
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 191
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 0
  , 1
  , 2
  , 3
  , 4
  , 5
  , 6
  , 7
  , 8
  , 9
  , 10
  , 11
  , 12
  , 13
  , 14
  , 15
  , 16
  , 17
  , 18
  , 19
  , 20
  , 21
  , 22
  , 23
  , 24
  , 25
  , 26
  , 27
  , 28
  , 29
  , 30
  , 31
  , 32
  , 33
  , 34
  , 35
  , 36
  , 37
  , 38
  , 39
  , 40
  , 41
  , 42
  , 43
  , 44
  , 45
  , 46
  , 47
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , 58
  , 59
  , 60
  , 61
  , 62
  , 63
  , 64
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , 91
  , 92
  , 93
  , 94
  , 95
  , 96
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 123
  , 124
  , 125
  , 126
  , 127
  , 192
  , 193
  , 194
  , 195
  , 196
  , 197
  , 198
  , 199
  , 200
  , 201
  , 202
  , 203
  , 204
  , 205
  , 206
  , 207
  , 208
  , 209
  , 210
  , 211
  , 212
  , 213
  , 214
  , 215
  , 216
  , 217
  , 218
  , 219
  , 220
  , 221
  , 222
  , 223
  , 224
  , 225
  , 226
  , 227
  , 228
  , 229
  , 230
  , 231
  , 232
  , 233
  , 234
  , 235
  , 236
  , 237
  , 238
  , 239
  , 240
  , 241
  , 242
  , 243
  , 244
  , 245
  , 246
  , 247
  , 248
  , 249
  , 250
  , 251
  , 252
  , 253
  , 254
  , 255
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , 45
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , 58
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , 45
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , 58
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , 45
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , 58
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 39
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  ]

alex_deflt :: Array Int Int
alex_deflt = listArray (0 :: Int, 109)
  [ -1
  , 51
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 26
  , 26
  , -1
  , -1
  , -1
  , 38
  , 38
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 51
  , 51
  , 51
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  ]

alex_accept = listArray (0 :: Int, 109)
  [ AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAcc 69
  , AlexAcc 68
  , AlexAcc 67
  , AlexAcc 66
  , AlexAcc 65
  , AlexAcc 64
  , AlexAcc 63
  , AlexAcc 62
  , AlexAcc 61
  , AlexAcc 60
  , AlexAcc 59
  , AlexAcc 58
  , AlexAcc 57
  , AlexAcc 56
  , AlexAccPred 55 (alexPrevCharMatches(\c -> c >= '\n' && c <= '\n' || False))(AlexAccNone)
  , AlexAcc 54
  , AlexAcc 53
  , AlexAcc 52
  , AlexAcc 51
  , AlexAcc 50
  , AlexAcc 49
  , AlexAcc 48
  , AlexAcc 47
  , AlexAcc 46
  , AlexAcc 45
  , AlexAcc 44
  , AlexAcc 43
  , AlexAcc 42
  , AlexAcc 41
  , AlexAcc 40
  , AlexAcc 39
  , AlexAcc 38
  , AlexAcc 37
  , AlexAcc 36
  , AlexAcc 35
  , AlexAcc 34
  , AlexAcc 33
  , AlexAcc 32
  , AlexAcc 31
  , AlexAcc 30
  , AlexAcc 29
  , AlexAcc 28
  , AlexAcc 27
  , AlexAcc 26
  , AlexAcc 25
  , AlexAcc 24
  , AlexAccPred 23 (alexPrevCharMatches(\c -> c >= '\n' && c <= '\n' || False))(AlexAccNone)
  , AlexAccPred 22 (alexPrevCharMatches(\c -> c >= '\n' && c <= '\n' || False))(AlexAccNone)
  , AlexAcc 21
  , AlexAcc 20
  , AlexAcc 19
  , AlexAcc 18
  , AlexAcc 17
  , AlexAcc 16
  , AlexAcc 15
  , AlexAcc 14
  , AlexAcc 13
  , AlexAcc 12
  , AlexAcc 11
  , AlexAcc 10
  , AlexAcc 9
  , AlexAcc 8
  , AlexAcc 7
  , AlexAcc 6
  , AlexAcc 5
  , AlexAcc 4
  , AlexAcc 3
  , AlexAcc 2
  , AlexAcc 1
  , AlexAccPred 0 (alexPrevCharMatches(\c -> c >= '\n' && c <= '\n' || False))(AlexAccNone)
  , AlexAccSkip
  ]

alex_actions = array (0 :: Int, 70)
  [ (69,alex_action_0)
  , (68,alex_action_1)
  , (67,alex_action_2)
  , (66,alex_action_3)
  , (65,alex_action_4)
  , (64,alex_action_5)
  , (63,alex_action_6)
  , (62,alex_action_7)
  , (61,alex_action_8)
  , (60,alex_action_9)
  , (59,alex_action_10)
  , (58,alex_action_11)
  , (57,alex_action_11)
  , (56,alex_action_11)
  , (55,alex_action_12)
  , (54,alex_action_13)
  , (53,alex_action_14)
  , (52,alex_action_15)
  , (51,alex_action_16)
  , (50,alex_action_17)
  , (49,alex_action_18)
  , (48,alex_action_19)
  , (47,alex_action_20)
  , (46,alex_action_21)
  , (45,alex_action_21)
  , (44,alex_action_21)
  , (43,alex_action_21)
  , (42,alex_action_21)
  , (41,alex_action_21)
  , (40,alex_action_22)
  , (39,alex_action_23)
  , (38,alex_action_23)
  , (37,alex_action_23)
  , (36,alex_action_23)
  , (35,alex_action_23)
  , (34,alex_action_23)
  , (33,alex_action_23)
  , (32,alex_action_23)
  , (31,alex_action_23)
  , (30,alex_action_23)
  , (29,alex_action_23)
  , (28,alex_action_24)
  , (27,alex_action_25)
  , (26,alex_action_26)
  , (25,alex_action_27)
  , (24,alex_action_28)
  , (23,alex_action_29)
  , (22,alex_action_30)
  , (21,alex_action_31)
  , (20,alex_action_32)
  , (19,alex_action_33)
  , (18,alex_action_34)
  , (17,alex_action_35)
  , (16,alex_action_36)
  , (15,alex_action_37)
  , (14,alex_action_38)
  , (13,alex_action_38)
  , (12,alex_action_38)
  , (11,alex_action_38)
  , (10,alex_action_38)
  , (9,alex_action_38)
  , (8,alex_action_38)
  , (7,alex_action_38)
  , (6,alex_action_38)
  , (5,alex_action_38)
  , (4,alex_action_38)
  , (3,alex_action_39)
  , (2,alex_action_40)
  , (1,alex_action_41)
  , (0,alex_action_42)
  ]

{-# LINE 128 "Lexer.x" #-}


data NextCode
  = EnterCode Int
  | ExitCode
  | KeepCode
  | ResetCode
  deriving (Eq, Show)


data AlexUserState = Trace
  { _tokens  :: [(Int, Token)]
  , _lastscd :: Maybe Int
  }

instance Show AlexUserState where
  show x = L.unlines
    [ "-- Tokens --"
    , L.unlines $ map show $ reverse $ _tokens x
    ]

lexer :: (Token -> Parser a) -> Parser a
lexer = ((Parser $ fmap Right alexMonadScan) >>=)

newtype Parser a = Parser
  { unParser :: Alex (Either Token a)
  }

instance Functor Parser where
  fmap f = Parser . fmap (fmap f) . unParser

instance Applicative Parser where
  pure = Parser . pure . Right

  f <*> x = Parser $ do
    f' <- unParser f
    x' <- unParser x
    return $ f' <*> x'

instance Monad Parser where
  return = Parser . return . Right

  x >>= f = Parser $ do
    a <- unParser x
    case a of
      Left err -> return $ Left err
      Right ok -> unParser $ f ok


data Error
  = LexError String
  | ParseError Token
  deriving (Eq, Show)

instance DisplayNeat Error where
  displayNeat x = case x of
    LexError str -> str
    ParseError tok -> show tok

runParser :: Parser a -> String -> Either Error a
runParser = runParser' 0

runParser' :: Int -> Parser a -> String -> Either Error a
runParser' mode p s =
  case runAlex s (alexSetStartCode mode >> unParser p) of
    Left msg -> Left $ LexError msg
    Right zs -> case zs of
      Left err -> Left $ ParseError err
      Right ok -> Right ok

data Token
  = TokenKeyword Lex.KeyWord Loc
  | TokenSymbol  Lex.Symbol  Loc
  | TokenWord    (String, Loc)
  | TokenBuiltIn (String, Loc)
  | TokenVarT (String, Loc)
  | TokenVarS (String, Loc)
  | TokenTypeConst String Loc
  | TokenConst (String, Loc)
  | TokenEff (String, Loc)

  | TokenInt (String, Loc)
  | TokenChar (String, Loc)
  | EOF
  deriving (Eq, Show)

alexEOF :: Alex Token
alexEOF = return EOF

_skip
  :: (AlexPosn, Char, [Byte], String)
  -> Int
  -> Alex ()
_skip _ _ = return ()

_t
  :: (Loc -> Token)
  -> NextCode
  -> (AlexPosn, Char, [Byte], String)
  -> Int
  -> Alex Token
_t tok next (pos, _, _, _) _ = do
  case next of
    KeepCode -> return ()
    EnterCode k -> do
      stashStartCode
      alexSetStartCode k
    ExitCode -> do
      k <- stealStartCode
      alexSetStartCode k
    ResetCode -> do
      stealStartCode
      alexSetStartCode 0
  let token = tok $ toLoc pos
  trace token
  return $ token

_w
  :: ((String, Loc) -> Token)
  -> NextCode
  -> (AlexPosn, Char, [Byte], String)
  -> Int
  -> Alex Token
_w tok next (pos, _, _, s) i = do
  case next of
    KeepCode -> return ()
    EnterCode k -> do
      stashStartCode
      alexSetStartCode k
    ExitCode -> do
      k <- stealStartCode
      alexSetStartCode k
    ResetCode -> do
      stealStartCode
      alexSetStartCode 0
  let token = tok (take i s, toLoc pos)
  trace token
  return token 

toLoc :: AlexPosn -> Loc
toLoc (AlexPn chr ln col) = Loc ln col chr

_DEBUG_TRACE :: Bool
_DEBUG_TRACE = True

trace :: Token -> Alex ()
trace x = if _DEBUG_TRACE
  then do
    ust <- gets alex_ust
    scd <- gets alex_scd
    let tr = _tokens ust
    muts $ \ast -> ast
      { alex_ust = ust
        { _tokens = (scd, x) : tr
        }
      }
  else return ()

gets :: (AlexState -> a) -> Alex a
gets f = Alex $ \ast ->
  Right (ast, f ast)

muts :: (AlexState -> AlexState) -> Alex ()
muts f = Alex $ \ast ->
  Right (f ast, ())

stashStartCode :: Alex ()
stashStartCode = do
  k <- alexGetStartCode
  muts $ \st -> st
    { alex_ust = (alex_ust st) { _lastscd = Just k }
    }

stealStartCode :: Alex Int
stealStartCode = do
  k <- gets (_lastscd . alex_ust)
  muts $ \st -> st
    { alex_ust = (alex_ust st) { _lastscd = Nothing }
    }
  case k of
    Nothing -> return 0
    Just m -> return m

debugAlex
  :: String -> Alex a -> Either String (AlexState, a)
debugAlex input__ (Alex f) = f $ AlexState
  { alex_bytes = []
  , alex_pos   = alexStartPos
  , alex_inp   = input__
  , alex_chr   = '\n'
  , alex_ust   = alexInitUserState
  , alex_scd   = 0
  }

asExpr :: Parser a -> Parser a
asExpr (Parser p) = Parser (alexSetStartCode def >> p)

debugParser :: (Show a) => Int -> Parser a -> String -> IO ()
debugParser mode p input = do
  putStrLn "\n===> Input:"
  putStrLn $ show input
  case debugAlex input (alexSetStartCode mode >> unParser p) of
    Left err -> do
      putStrLn "\n===> Lexical Error:"
      putStrLn err
    Right (st,zs) -> do
      case zs of
        Left tok -> do
          putStrLn "\n===> Parse Error at token:"
          putStrLn $ show tok
        Right ok -> do
          putStrLn "\n===> Parse Result:"
          putStrLn $ show ok
      putStrLn "\n===> Debug:"
      putStrLn $ show $ alex_ust st

alexInitUserState :: AlexUserState
alexInitUserState = Trace [] Nothing



chr,dec,def,sig,tok :: Int
chr = 1
dec = 2
def = 3
sig = 4
tok = 5
alex_action_0 =  _w TokenWord                          KeepCode 
alex_action_1 =  _w TokenBuiltIn                       KeepCode 
alex_action_2 =  _w TokenInt                           KeepCode 
alex_action_3 =  _w TokenInt                           KeepCode 
alex_action_4 =  _t (TokenSymbol Lex.SY_SingleQuote)   (EnterCode chr) 
alex_action_5 =  _t (TokenSymbol Lex.SY_DoubleQuote)   (EnterCode chr) 
alex_action_6 =  _t (TokenSymbol Lex.SY_OpenBrack)     KeepCode 
alex_action_7 =  _t (TokenSymbol Lex.SY_ClosedBrack)   KeepCode 
alex_action_8 =  _t (TokenSymbol Lex.SY_SingleQuote)   ExitCode 
alex_action_9 =  _t (TokenSymbol Lex.SY_DoubleQuote)   ExitCode 
alex_action_10 =  _w TokenChar                          KeepCode 
alex_action_11 =  _w TokenChar                          KeepCode 
alex_action_12 =  _t (TokenKeyword Lex.KW_Define)       (EnterCode tok) 
alex_action_13 =  _w TokenWord                          (EnterCode sig) 
alex_action_14 =  _t (TokenSymbol Lex.SY_DoubleColon)   KeepCode 
alex_action_15 =  _t (TokenSymbol Lex.SY_Dollar)        KeepCode 
alex_action_16 =  _t (TokenSymbol Lex.SY_ForAll)        KeepCode 
alex_action_17 =  _t (TokenTypeConst "Int")             KeepCode 
alex_action_18 =  _t (TokenTypeConst "Char")            KeepCode 
alex_action_19 =  _t (TokenTypeConst "String")          KeepCode 
alex_action_20 =  _w TokenEff                           KeepCode 
alex_action_21 =  _w TokenVarT                          KeepCode 
alex_action_22 =  _w TokenVarS                          KeepCode 
alex_action_23 =  _w TokenConst                         KeepCode 
alex_action_24 =  _t (TokenSymbol Lex.SY_Dot)           KeepCode 
alex_action_25 =  _t (TokenSymbol Lex.SY_MinusGreater)  KeepCode 
alex_action_26 =  _t (TokenSymbol Lex.SY_OpenParen)     KeepCode 
alex_action_27 =  _t (TokenSymbol Lex.SY_ClosedParen)   KeepCode 
alex_action_28 =  _t (TokenSymbol Lex.SY_DoubleEqual)   (EnterCode def) 
alex_action_29 =  _t (TokenKeyword Lex.KW_End)          ResetCode 
alex_action_30 =  _t (TokenKeyword Lex.KW_Data)         (EnterCode dec) 
alex_action_31 =  _t (TokenSymbol Lex.SY_Equal)         KeepCode 
alex_action_32 =  _t (TokenSymbol Lex.SY_Pipe)          KeepCode 
alex_action_33 =  _t (TokenSymbol Lex.SY_Dollar)        KeepCode 
alex_action_34 =  _w TokenVarT                          KeepCode 
alex_action_35 =  _t (TokenTypeConst "Int")             KeepCode 
alex_action_36 =  _t (TokenTypeConst "Char")            KeepCode 
alex_action_37 =  _t (TokenTypeConst "String")          KeepCode 
alex_action_38 =  _w TokenConst                         KeepCode 
alex_action_39 =  _t (TokenSymbol Lex.SY_MinusGreater)  KeepCode 
alex_action_40 =  _t (TokenSymbol Lex.SY_OpenParen)     KeepCode 
alex_action_41 =  _t (TokenSymbol Lex.SY_ClosedParen)   KeepCode 
alex_action_42 =  _t (TokenKeyword Lex.KW_End)          ResetCode 
{-# LINE 1 "templates/GenericTemplate.hs" #-}
-- -----------------------------------------------------------------------------
-- ALEX TEMPLATE
--
-- This code is in the PUBLIC DOMAIN; you may copy it freely and use
-- it for any purpose whatsoever.

-- -----------------------------------------------------------------------------
-- INTERNALS and main scanner engine































































alexIndexInt16OffAddr arr off = arr ! off




















alexIndexInt32OffAddr arr off = arr ! off











quickIndex arr i = arr ! i


-- -----------------------------------------------------------------------------
-- Main lexing routines

data AlexReturn a
  = AlexEOF
  | AlexError  !AlexInput
  | AlexSkip   !AlexInput !Int
  | AlexToken  !AlexInput !Int a

-- alexScan :: AlexInput -> StartCode -> AlexReturn a
alexScan input__ (sc)
  = alexScanUser undefined input__ (sc)

alexScanUser user__ input__ (sc)
  = case alex_scan_tkn user__ input__ (0) input__ sc AlexNone of
  (AlexNone, input__') ->
    case alexGetByte input__ of
      Nothing ->



                                   AlexEOF
      Just _ ->



                                   AlexError input__'

  (AlexLastSkip input__'' len, _) ->



    AlexSkip input__'' len

  (AlexLastAcc k input__''' len, _) ->



    AlexToken input__''' len (alex_actions ! k)


-- Push the input through the DFA, remembering the most recent accepting
-- state it encountered.

alex_scan_tkn user__ orig_input len input__ s last_acc =
  input__ `seq` -- strict in the input
  let
  new_acc = (check_accs (alex_accept `quickIndex` (s)))
  in
  new_acc `seq`
  case alexGetByte input__ of
     Nothing -> (new_acc, input__)
     Just (c, new_input) ->



      case fromIntegral c of { (ord_c) ->
        let
                base   = alexIndexInt32OffAddr alex_base s
                offset = (base + ord_c)
                check  = alexIndexInt16OffAddr alex_check offset

                new_s = if (offset >= (0)) && (check == ord_c)
                          then alexIndexInt16OffAddr alex_table offset
                          else alexIndexInt16OffAddr alex_deflt s
        in
        case new_s of
            (-1) -> (new_acc, input__)
                -- on an error, we want to keep the input *before* the
                -- character that failed, not after.
            _ -> alex_scan_tkn user__ orig_input (if c < 0x80 || c >= 0xC0 then (len + (1)) else len)
                                                -- note that the length is increased ONLY if this is the 1st byte in a char encoding)
                        new_input new_s new_acc
      }
  where
        check_accs (AlexAccNone) = last_acc
        check_accs (AlexAcc a  ) = AlexLastAcc a input__ (len)
        check_accs (AlexAccSkip) = AlexLastSkip  input__ (len)

        check_accs (AlexAccPred a predx rest)
           | predx user__ orig_input (len) input__
           = AlexLastAcc a input__ (len)
           | otherwise
           = check_accs rest
        check_accs (AlexAccSkipPred predx rest)
           | predx user__ orig_input (len) input__
           = AlexLastSkip input__ (len)
           | otherwise
           = check_accs rest


data AlexLastAcc
  = AlexNone
  | AlexLastAcc !Int !AlexInput !Int
  | AlexLastSkip     !AlexInput !Int

data AlexAcc user
  = AlexAccNone
  | AlexAcc Int
  | AlexAccSkip

  | AlexAccPred Int (AlexAccPred user) (AlexAcc user)
  | AlexAccSkipPred (AlexAccPred user) (AlexAcc user)

type AlexAccPred user = user -> AlexInput -> Int -> AlexInput -> Bool

-- -----------------------------------------------------------------------------
-- Predicates on a rule

alexAndPred p1 p2 user__ in1 len in2
  = p1 user__ in1 len in2 && p2 user__ in1 len in2

--alexPrevCharIsPred :: Char -> AlexAccPred _
alexPrevCharIs c _ input__ _ _ = c == alexInputPrevChar input__

alexPrevCharMatches f _ input__ _ _ = f (alexInputPrevChar input__)

--alexPrevCharIsOneOfPred :: Array Char Bool -> AlexAccPred _
alexPrevCharIsOneOf arr _ input__ _ _ = arr ! alexInputPrevChar input__

--alexRightContext :: Int -> AlexAccPred _
alexRightContext (sc) user__ _ _ input__ =
     case alex_scan_tkn user__ input__ (0) input__ sc AlexNone of
          (AlexNone, _) -> False
          _ -> True
        -- TODO: there's no need to find the longest
        -- match when checking the right context, just
        -- the first match will do.

